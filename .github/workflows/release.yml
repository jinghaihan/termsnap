name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: amd64
            binary_name: termsnap-linux-x64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            binary_name: termsnap-linux-arm64
          - os: macos-latest
            platform: darwin
            arch: amd64
            binary_name: termsnap-darwin-x64
          - os: macos-latest
            platform: darwin
            arch: arm64
            binary_name: termsnap-darwin-arm64
          - os: windows-latest
            platform: windows
            arch: amd64
            binary_name: termsnap-win32-x64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build binary
        shell: bash
        run: |
          GOOS=${{ matrix.platform }} GOARCH=${{ matrix.arch }} go build -o ${{ matrix.binary_name }} main.go
          chmod +x ${{ matrix.binary_name }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: ${{ matrix.binary_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          path: binaries
          pattern: termsnap-*
          merge-multiple: true

      - name: Verify downloaded binaries
        run: |
          echo "Verifying downloaded binaries..."
          echo "Expected binaries:"
          echo "- termsnap-linux-x64"
          echo "- termsnap-linux-arm64"
          echo "- termsnap-darwin-x64"
          echo "- termsnap-darwin-arm64"
          echo "- termsnap-win32-x64.exe"
          echo ""
          echo "Actual binaries found:"
          find binaries/ -name "termsnap-*" -type f | sort
          echo ""
          echo "Binary count: $(find binaries/ -name "termsnap-*" -type f | wc -l)"

          # Check if we have all expected binaries
          expected_count=5
          actual_count=$(find binaries/ -name "termsnap-*" -type f | wc -l)

          if [ "$actual_count" -lt "$expected_count" ]; then
            echo "Error: Expected $expected_count binaries, but found $actual_count"
            echo "This might indicate that some build jobs failed or artifacts weren't uploaded properly"
            exit 1
          fi

      - name: Install pnpm
        uses: pnpm/action-setup@v3

      - name: Set node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Create Release
        id: create_release
        run: |
          echo "Creating release for tag: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"

          # Check if this is a beta/alpha version
          if [[ "${{ github.ref_name }}" == *"alpha"* ]] || [[ "${{ github.ref_name }}" == *"beta"* ]]; then
            echo "Beta/Alpha version detected, creating draft release"
            # Create a draft release for testing (not visible to followers)
            gh release create ${{ github.ref_name }} \
              --title "termsnap ${{ github.ref_name }}" \
              --notes "Beta/Alpha release for testing" \
              --draft \
              --prerelease

            # Check if release was created successfully
            if [ $? -eq 0 ]; then
              echo "Release created successfully"
            else
              echo "Failed to create release"
              exit 1
            fi
          else
            echo "Production release, creating public release"
            # Use changelogithub for production releases
            npx changelogithub
          fi

          # Verify release exists
          echo "Verifying release exists..."
          gh release view ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Upload binaries to release
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing binaries directory:"
          ls -la binaries/
          echo "Listing all files recursively:"
          find binaries/ -type f -exec ls -la {} \;

          TAG_NAME="${{ github.ref_name }}"
          REPO="${{ github.repository }}"

          echo "Target tag: $TAG_NAME"
          echo "Target repo: $REPO"

          # Confirm release exists (even if it's a draft)
          echo "Verifying release exists for tag: $TAG_NAME"
          RELEASE_ID=$(gh api repos/$REPO/releases --jq ".[] | select(.tag_name == \"$TAG_NAME\") | .id")

          if [ -z "$RELEASE_ID" ]; then
            echo "Error: Could not find release for tag $TAG_NAME"
            echo "Available releases:"
            gh api repos/$REPO/releases --jq '.[].tag_name'
            exit 1
          fi

          echo "Found release ID: $RELEASE_ID"

          # Upload each binary using gh release upload (supports drafts!)
          for binary in binaries/*; do
            if [ -f "$binary" ]; then
              echo "Uploading $binary to release $TAG_NAME"
              echo "File size: $(ls -lh "$binary" | awk '{print $5}')"

              gh release upload "$TAG_NAME" "$binary" --repo "$REPO" --clobber

              if [ $? -eq 0 ]; then
                echo "✅ Successfully uploaded $(basename "$binary")"
              else
                echo "❌ Failed to upload $(basename "$binary")"
                exit 1
              fi
            else
              echo "⚠️ Skipped $binary: not a regular file"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
